services:
  web:
    container_name: ifc-web-app
    # platform: linux/amd64
    image: ifcweb.azurecr.io/ifc-web
    # ports:
    #   - 3000:3000
    environment:
      - YOUTUBE_API_KEY
      - MICROSOFT_GRAPH_TENANT
      - MICROSOFT_GRAPH_CLIENT_ID
      - MICROSOFT_GRAPH_CLIENT_SECRET
      - WIX_ENDPOINT
      - WIX_CONTACT_FORM_PATH
      - RADIO_SERVER
      - RADIO_SERVER_NAME
      - NEXT_PUBLIC_GA_MEASUREMENT_ID
      - NODE_ENV=production
    depends_on:
      - strapi
    networks:
      - datanet
  nginx:
    container_name: ifc-proxy
    # platform: linux/amd64
    image: ifcweb.azurecr.io/ifc-proxy
    environment:
      - DOMAIN
      - WEB_SERVICE_NAME=web
      - WEB_SERVICE_PORT=3000
      - CMS_HOST=strapi
      - CMS_HOST_PORT=1337
    volumes:
      - nginx_logs:/var/log/nginx
      - nginx_run:/var/run
      - nginx_cache:/var/cache/nginx
      # - letsencrypt:/etc/letsencrypt
      # - certbot_:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    depends_on:
      - web
    networks:
      - proxynet
      - datanet
  strapi:
    container_name: ifc-cms
    # platform: linux/amd64
    image: ifcweb.azurecr.io/ifc-cms
    restart: unless-stopped
    environment:
      - DOMAIN
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME
      - DATABASE_USERNAME
      - DATABASE_PASSWORD
      - JWT_SECRET
      - ADMIN_JWT_SECRET
      - APP_KEYS
      - API_TOKEN_SALT
      - TRANSFER_TOKEN_SALT
      - NODE_ENV=production
    ports:
      - 1337:1337
    networks:
      - datanet
    depends_on:
      - db
  db:
    container_name: ifc-db
    platform: linux/amd64
    restart: unless-stopped
    image: postgres:14-alpine
    environment:
      # - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      # - strapi-data:/var/lib/postgresql/data/ #using a volume
      - database:/var/lib/postgresql/data/ # if you want to use a bind folder
    ports:
      - 5432:5432
    networks:
      - datanet

  # certbot:
  #   container_name: ifc-certbot
  #   image: certbot/certbot
  #   volumes:
  #     - letsencrypt:/etc/letsencrypt
  #     - certbot_:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
volumes:
  nginx_logs:
  nginx_run:
  nginx_cache:
  database:
  # letsencrypt:
  # certbot_:
networks:
  proxynet:
  datanet:
